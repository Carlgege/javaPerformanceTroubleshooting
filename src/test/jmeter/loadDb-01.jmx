<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">This plan uses multiple threads to execute a task a specific number of times. 

This is helpful when multiple threads are required to put things in parallel, but the total count of things to be done is constant.
You can vary the number of threads (in the &apos;Thread Group&apos; depending on the processing power of your machine.
</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BRANCH_COUNT_PER_THREAD" elementType="Argument">
            <stringProp name="Argument.name">BRANCH_COUNT_PER_THREAD</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HISTORY_RECS_PER_ACCOUNT" elementType="Argument">
            <stringProp name="Argument.name">HISTORY_RECS_PER_ACCOUNT</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ACCOUNT_RECS_PER_BRANCH" elementType="Argument">
            <stringProp name="Argument.name">ACCOUNT_RECS_PER_BRANCH</stringProp>
            <stringProp name="Argument.value">1250</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILLER" elementType="Argument">
            <stringProp name="Argument.name">FILLER</stringProp>
            <stringProp name="Argument.value">0123456789012345678901234567890123456789012345678901234567890123456789012345678901</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TABLE_BRANCHES" elementType="Argument">
            <stringProp name="Argument.name">TABLE_BRANCHES</stringProp>
            <stringProp name="Argument.value">S01.BRANCHES</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TABLE_ACCOUNTS" elementType="Argument">
            <stringProp name="Argument.name">TABLE_ACCOUNTS</stringProp>
            <stringProp name="Argument.value">S01.ACCOUNTS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TABLE_HISTORY" elementType="Argument">
            <stringProp name="Argument.name">TABLE_HISTORY</stringProp>
            <stringProp name="Argument.value">S01.HISTORY</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="JDBC_URL" elementType="Argument">
            <stringProp name="Argument.name">JDBC_URL</stringProp>
            <stringProp name="Argument.value">jdbc:h2:tcp://localhost/perfSandboxDb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TABLE_TELLERS" elementType="Argument">
            <stringProp name="Argument.name">TABLE_TELLERS</stringProp>
            <stringProp name="Argument.value">S01.TELLERS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILLER_SMALL" elementType="Argument">
            <stringProp name="Argument.name">FILLER_SMALL</stringProp>
            <stringProp name="Argument.value">0123456789012345678912</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREAD_COUNT" elementType="Argument">
            <stringProp name="Argument.name">THREAD_COUNT</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SCHEMA" elementType="Argument">
            <stringProp name="Argument.name">SCHEMA</stringProp>
            <stringProp name="Argument.value">S01</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection WITHOUT SCHEMA" enabled="true">
        <stringProp name="dataSource">PERF_SANDBOX_POOL</stringProp>
        <stringProp name="poolMax">${THREAD_COUNT}</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">${JDBC_URL}</stringProp>
        <stringProp name="driver">org.h2.Driver</stringProp>
        <stringProp name="username"></stringProp>
        <stringProp name="password"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="DROP AND CREATE TABLES" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1463364074000</longProp>
        <longProp name="ThreadGroup.end_time">1463364074000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DROP TABLES" enabled="false">
          <stringProp name="dataSource">PERF_SANDBOX_POOL_NO_SCHEMA</stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="query">SET SCHEMA ${SCHEMA};
DROP TABLE IF EXISTS ${TABLE_HISTORY};
DROP TABLE IF EXISTS ${TABLE_ACCOUNTS};
DROP TABLE IF EXISTS ${TABLE_TELLERS};
DROP TABLE IF EXISTS ${TABLE_BRANCHES};</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DROP TABLES" enabled="true">
          <stringProp name="dataSource">PERF_SANDBOX_POOL</stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="query">DROP SCHEMA IF EXISTS ${SCHEMA};</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE TABLES" enabled="true">
          <stringProp name="dataSource">PERF_SANDBOX_POOL</stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="query">CREATE SCHEMA IF NOT EXISTS ${SCHEMA};

SET SCHEMA ${SCHEMA};

CREATE TABLE ${TABLE_BRANCHES} (
        bid int not null,
        bbalance int,
        filler char(88));
ALTER TABLE ${TABLE_BRANCHES} add primary key (bid);

CREATE TABLE ${TABLE_TELLERS} (
        tid int not null,
        bid int,
        tbalance int,
        filler char(84));
ALTER TABLE ${TABLE_TELLERS} add primary key (tid);

CREATE TABLE ${TABLE_ACCOUNTS} (
        AID int not null,
        BID int,
        ABALANCE int,
        FILLER char(84),
        FILLER01 char(84),
        FILLER02 char(84),
        FILLER03 char(84),
        FILLER04 char(84),
        FILLER05 char(84),
        FILLER06 char(84),
        FILLER07 char(84),
        FILLER08 char(84),
        FILLER09 char(84),
        FILLER10 char(84),
        FILLER11 char(84),
        FILLER12 char(84),
        FILLER13 char(84),
        FILLER14 char(84),
        FILLER15 char(84),
        FILLER16 char(84),
        FILLER17 char(84),
        FILLER18 char(84),
        FILLER19 char(84),
        FILLER20 char(84)
);
        
ALTER TABLE ${TABLE_ACCOUNTS} add primary key (aid);

CREATE TABLE ${TABLE_HISTORY} (
        hid bigint  not null,
        tid int ,
        bid int,
        aid int,
        delta int,
        mtime timestamp,
        filler char(22) );
ALTER TABLE ${TABLE_HISTORY} add primary key (hid);

        </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="INSERT DATA" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREAD_COUNT}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1463340335000</longProp>
        <longProp name="ThreadGroup.end_time">1463340335000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Through Branches" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${BRANCH_COUNT_PER_THREAD}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="CURRENT_BRANCH_COUNT" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">CURRENT_BRANCH_COUNT</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="INSERT Branch Rec" enabled="true">
            <stringProp name="dataSource">PERF_SANDBOX_POOL</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO ${TABLE_BRANCHES} (
   	BID, 
   	FILLER
) VALUES (
	?, 
	? 
)</stringProp>
            <stringProp name="queryArguments">${CURRENT_BRANCH_COUNT},${FILLER}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Through Accounts" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${ACCOUNT_RECS_PER_BRANCH}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="CURRENT_ACCOUNT_COUNT" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">CURRENT_ACCOUNT_COUNT</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Account Balance" enabled="true">
              <stringProp name="maximumValue">1000000000</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">2390974441</stringProp>
              <stringProp name="variableName">MY_ACCOUNT_BALANCE</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="INSERT Account Rec" enabled="true">
              <stringProp name="dataSource">PERF_SANDBOX_POOL</stringProp>
              <stringProp name="queryType">Prepared Update Statement</stringProp>
              <stringProp name="query">INSERT INTO ${TABLE_ACCOUNTS} (
	AID,
	BID,
	ABALANCE,
	FILLER,
        filler01 ,
        filler02 ,
        filler03 ,
        filler04 ,
        filler05 ,
        filler06 ,
        filler07 ,
        filler08 ,
        filler09 ,
        filler10 ,
        filler11 ,
        filler12 ,
        filler13 ,
        filler14 ,
        filler15 ,
        filler16 ,
        filler17 ,
        filler18 ,
        filler19 ,
        filler20 	
) VALUES (
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)
	</stringProp>
              <stringProp name="queryArguments">${CURRENT_ACCOUNT_COUNT},${CURRENT_BRANCH_COUNT},${MY_ACCOUNT_BALANCE},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER},${FILLER}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,INTEGER,DOUBLE,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Through History Records" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${HISTORY_RECS_PER_ACCOUNT}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="CURRENT_TRANSACTION_COUNT" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">CURRENT_TRANSACTION_COUNT</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="INSERT History Rec" enabled="true">
                <stringProp name="dataSource">PERF_SANDBOX_POOL</stringProp>
                <stringProp name="queryType">Prepared Update Statement</stringProp>
                <stringProp name="query">INSERT INTO ${TABLE_HISTORY} (
	HID,
	TID,
	BID,
	AID,
	MTIME,
	FILLER  
) VALUES (
	?,
	?,
	?,
	?,
	?,
	?
)
	
</stringProp>
                <stringProp name="queryArguments">${CURRENT_TRANSACTION_COUNT},1,${CURRENT_BRANCH_COUNT},${CURRENT_ACCOUNT_COUNT},${__time(&quot;yyyy-MM-dd hh:mm:ss&quot;)},${FILLER_SMALL}</stringProp>
                <stringProp name="queryArgumentsTypes">DOUBLE,INTEGER,INTEGER,INTEGER,TIMESTAMP,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Display Branch Progress" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">System.out.print(&quot;b&quot;);</stringProp>
            <stringProp name="scriptLanguage">beanshell</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Results Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1463381402000</longProp>
        <longProp name="ThreadGroup.end_time">1463381402000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="RESULT_BRANCHES" enabled="true">
          <stringProp name="dataSource">PERF_SANDBOX_POOL</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT COUNT(*) TABLE_COUNT FROM ${TABLE_BRANCHES}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">TABLE_COUNT</stringProp>
          <stringProp name="resultVariable">RESULT_BRANCHES</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="RESULT_ACCOUNTS" enabled="true">
          <stringProp name="dataSource">PERF_SANDBOX_POOL</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT COUNT(*) TABLE_COUNT FROM ${TABLE_ACCOUNTS} ;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">TABLE_COUNT</stringProp>
          <stringProp name="resultVariable">RESULT_ACCOUNTS</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="RESULT_HISTORY" enabled="true">
          <stringProp name="dataSource">PERF_SANDBOX_POOL</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT COUNT(*) TABLE_COUNT FROM ${TABLE_HISTORY}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">TABLE_COUNT</stringProp>
          <stringProp name="resultVariable">RESULT_HISTORY</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Output Table Counts to STDOUT" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">System.out.println(&quot;&quot;);
ArrayList result = vars.getObject(&quot;RESULT_BRANCHES&quot;);
for (HashMap table : result) {
    for (Object column : table.keySet()) {
        	System.out.println( vars.get(&quot;TABLE_BRANCHES&quot;) + &quot;=&quot; + table.get(column) );
    }
}

result = vars.getObject(&quot;RESULT_ACCOUNTS&quot;);
for (HashMap table : result) {
    for (Object column : table.keySet()) {
        	System.out.println( vars.get(&quot;TABLE_ACCOUNTS&quot;) + &quot;=&quot; + table.get(column) );
    }
}

result = vars.getObject(&quot;RESULT_HISTORY&quot;);
for (HashMap table : result) {
    for (Object column : table.keySet()) {
        	System.out.println( vars.get(&quot;TABLE_HISTORY&quot;) + &quot;=&quot; + table.get(column) );
    }
}
System.out.println(&quot;#####END OF DB LOAD #####&quot;);</stringProp>
          <stringProp name="scriptLanguage">beanshell</stringProp>
        </BSFSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
